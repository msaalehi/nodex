name: Release

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  check-user:
    name: Check Team affiliation and Branch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Team affiliation and Branch
        uses: ./.github/actions/check-team-affiliation-and-branch
        with:
          ref: ${{ github.ref }}
          actor: ${{ github.actor }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build
    needs: check-user
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: (checkout) source code
        uses: actions/checkout@v4

      - name: (run) build
        uses: ./.github/actions/build
        with:
          os: ${{ matrix.os }}
          use-cache: false
          github-token: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install `cargo-get`
        run: cargo install cargo-get

      - name: Set Crate Version as Environment Variable
        id: set_crate_version
        run: |
          CARGO_TOML_VERSION=$(cargo get package.version)
          echo "version=$CARGO_TOML_VERSION" >> $GITHUB_OUTPUT

      - name: Download artifacts (mac)
        uses: actions/download-artifact@v3
        with:
          name: macos-latest
          path: ~/macos-latest

      - name: Download artifacts (linux)
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-latest
          path: ~/ubuntu-latest

      - name: Create Example asset
        shell: bash
        working-directory: examples/nodejs
        run: |
          mv app/README.md .
          zip -r example.zip app/ README.md package.json tsconfig.json yarn.lock ../../LICENSE

      - name: Create Release
        uses: actions/github-script@v5
        id: release
        with:
          result-encoding: string
          script: |
            const fs = require('fs').promises;
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: "v${{ steps.set_crate_version.outputs.version }}",
              generate_release_notes: true
            });
            return release.data.id;

      - name: Upload asset (linux)
        uses: ./.github/actions/upload-release-asset
        with:
          release_id: ${{ steps.release.outputs.result }}
          asset_path: /home/runner/ubuntu-latest/nodex-agent-ubuntu-latest.zip
          asset_name: nodex-agent-x86_64.zip
          asset_content_type: application/zip
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload asset (mac)
        uses: ./.github/actions/upload-release-asset
        with:
          release_id: ${{ steps.release.outputs.result }}
          asset_path: /home/runner/macos-latest/nodex-agent-macos-latest.zip
          asset_name: nodex-agent-mac.zip
          asset_content_type: application/zip
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload asset (example)
        uses: ./.github/actions/upload-release-asset
        with:
          release_id: ${{ steps.release.outputs.result }}
          asset_path: ./examples/nodejs/example.zip
          asset_name: example.zip
          asset_content_type: application/zip
          github_token: ${{ secrets.GITHUB_TOKEN }}
